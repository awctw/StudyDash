/**
 * Super memo 2: Spaced-repetition algorithm
 * 
 * @param {number} quality An integer from 0-5 indicating how easily the information was remembered today
 * @param {number} reps The number of times the information has been reviewed prior to this review
 * @param {number} prevInterval Generated by the last iteration, indicates the number of days to wait between reviews
 * @param {number} prevEaseFactor The ease factor (>= 1.3) is used to determine the number of days to wait before reviewing again 
 * @returns {object} updated reps, easeFactor and interval attributes alongwith the next review date
 */
const spacedRep = (
    quality,
    reps,
    prevInterval,
    prevEaseFactor,
) => {
    var repetitions, interval, easeFactor;

    if (quality >= 3) {
        switch (reps) {
            case 0:
                interval = 1;
                break;
            case 1:
                interval = 6;
                break;
            default:
                interval = Math.round((prevInterval * prevEaseFactor));
                break;
        }

        repetitions = reps + 1;

        easeFactor = prevEaseFactor + (0.1 - (5 - quality) * (0.08 + (5 - quality) * 0.02));
    } else {
        repetitions = 0;
        interval = 1;
        easeFactor = prevEaseFactor;
    }

    if (easeFactor < 1.3) {
        easeFactor = 1.5;
    }

    var nextReview = new Date(); // now

    // date when the next review should take place
    nextReview.setUTCDate(nextReview.getUTCDate() + interval);

    return {
        reps: repetitions,
        easeFactor: easeFactor,
        interval: interval,
        reviewDate: nextReview
    }

}

module.exports = {
    spacedRep
}

/**
 * References: 
 * - https://github.com/thyagoluciano/sm2
 * - chatGPT
 */

